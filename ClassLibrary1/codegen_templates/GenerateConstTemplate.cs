using System.CommandLine;
using System.CommandLine.Parsing;
using CodegenCS;
using CodegenCS.IO;
using CodegenCS.Runtime;

namespace ClassLibrary1.codegen_templates
{
    public class GenerateConstTemplate
    {
        private static readonly Argument<string[]> ConstName = new("name", "The name of the const")
        { Arity = ArgumentArity.ZeroOrMore };

        private static readonly Argument<string[]> ConstValue = new("value", "The value of the const")
        { Arity = ArgumentArity.ZeroOrMore };

        private readonly ParseResult _parseResult;
        private readonly ILogger _logger;

        public GenerateConstTemplate(ParseResult parseResult, ILogger logger)
        {
            _parseResult = parseResult;
            _logger = logger;
        }

        public int Main(ICodegenTextWriter writer)
        {
            try
            {
                Render(writer);
            }
            catch (Exception e)
            {
                _logger.WriteLineErrorAsync(ConsoleColor.Red, (RawString)e.Message);
                return -1;
            }
            return 0;
        }

        public static void ConfigureCommand(Command command)
        {
            command.Description = "Generates a public static Class with const string by argument value";
            command.AddArgument(ConstName);
            command.AddArgument(ConstValue);
        }

        private void Render(ICodegenTextWriter writer)
        {
            if (_parseResult.Errors.Any())
            {
                throw new AggregateException(_parseResult.Errors.Select(parseError => new Exception(parseError.Message)));
            }

            var name = _parseResult.GetValueForArgument(ConstName);
            var value = _parseResult.GetValueForArgument(ConstValue);

            if (name.Length > 0 && value.Length > 0 && name.Length != value.Length)
            {
                throw new ArgumentException("The number of names and values must match");
            }

            var constPairs = name.Zip(value, (n, v) => (n, v));


            writer.WriteLine($$"""
            // This file is generated by CodegenCS
            namespace Generated;
            
            public static class GeneratedConst
            {
            {{IF(constPairs.Any())}}
               public const string {{constPairs.Select(nameValue => (FormattableString)$"{nameValue.n} = {nameValue.v};").Render()}} 
            {{ENDIF}}
            }
            """);
        }
    }
}
